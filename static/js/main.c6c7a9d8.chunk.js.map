{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","prevState","onDeleteClick","a","delete","email","name","phone","className","onClick","style","cursor","color","float","bind","to","marginRight","defaultProps","Contacts","Fragment","key","Header","branding","href","About","NotFound","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onChangeHandler","e","target","onSubmitHandler","preventDefault","newContact","post","history","push","onSubmit","EditContact","updContact","match","params","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6c7a9d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n        )\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts]\r\n      };\r\n\r\n    case \"UPDATE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact.id === action.payload.id\r\n            ? (contact = action.payload)\r\n            : contact\r\n        )\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  state = {\r\n    contacts: [],\r\n    dispatch: action => this.setState(state => reducer(state, action))\r\n  };\r\n\r\n  async componentDidMount() {\r\n    /*\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(data => console.log(data));\r\n    */\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n    this.setState({\r\n      contacts: res.data\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\nexport const Consumer = Context.Consumer;\r\n// if we only do 'export const Context.Consumer', everytime when we need,\r\n//we need to use <Context.Consumer /> instead of <Consumer />\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../../context\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false\r\n  };\r\n\r\n  onShowClick = () => {\r\n    //this.setState({ showContactInfo: !this.state.showContactInfo });\r\n    // below is the safe way to do like above\r\n    this.setState(prevState => ({\r\n      showContactInfo: !prevState.showContactInfo\r\n    }));\r\n    //console.log(this.state.showContactInfo);\r\n  };\r\n\r\n  onDeleteClick = async (id, dispatch) => {\r\n    try {\r\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n      dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    } catch (e) {\r\n      dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    }\r\n\r\n    await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n    dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n  };\r\n\r\n  render() {\r\n    const { id, email, name, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card card-body mb-2\">\r\n              <h4>\r\n                {name}\r\n                <i\r\n                  onClick={this.onShowClick}\r\n                  className=\"fa fa-sort-down\"\r\n                  style={{ cursor: \"pointer\", color: \"green\" }}\r\n                />\r\n                <i\r\n                  className=\"fa fa-times\"\r\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                />\r\n                <Link to={`/contact/edit/${id}`}>\r\n                  <i\r\n                    className=\"fa fa-pencil\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      float: \"right\",\r\n                      color: \"black\",\r\n                      marginRight: \"1rem\"\r\n                    }}\r\n                  />\r\n                </Link>\r\n              </h4>\r\n              {showContactInfo ? (\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Email: {email}</li>\r\n                  <li className=\"list-group-item\">Phone: {phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nContact.defaultProps = {\r\n  name: \"default name\",\r\n  email: \"default email\",\r\n  phone: \"default phone\"\r\n};\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired\r\n  //deleteClickHandler: PropTypes.func.isRequired\r\n};\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n  /* before context.api\r\n  deleteContact = id => {\r\n    //delete functionality\r\n    const { contacts } = this.state;\r\n    const newContacts = contacts.filter(contact => contact.id !== id);\r\n    this.setState({\r\n      contacts: newContacts\r\n    });\r\n  };\r\n  */\r\n\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              <h1 className=\"display-4 mb-2\">\r\n                <span className=\"text-danger\">Contact </span> List\r\n              </h1>\r\n              {contacts.map(contact => (\r\n                <Contact\r\n                  key={contact.id}\r\n                  contact={contact}\r\n                  //deleteClickHandler={this.deleteContact.bind(this, contact.id)}\r\n                />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"; //impt\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                <i className=\"fa fa-home\"></i> Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/contact/add\" className=\"nav-link\">\r\n                <i className=\"fa fa-plus\"></i> Add\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                <i className=\"fa fa-question\"></i> About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: \"Default Manager\"\r\n};\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h2 className=\"display-4 \"> About Contact Manager</h2>\r\n      <p className=\"lead\">Simple Application to manage contacts.</p>\r\n      <p className=\"text-secondary\">version 1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        {\" \"}\r\n        <span className=\"text-danger\">404 </span> Page Not Found\r\n      </h1>\r\n      <p className=\"lead\">Sorry, that page doesn't exist.</p>\r\n    </div>\r\n  );\r\n};\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n\r\n//or (props) -> props.label. props.name, ...\r\nconst TextInputGroup = ({\r\n  label,\r\n  name,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  onChange,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        type={type}\r\n        name={name}\r\n        className={classnames(\"form-control form-control-sm\", {\r\n          \"is-invalid\": error\r\n        })}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        error={error}\r\n        //required\r\n      />\r\n      {error && <div className=\"invalid-feedback\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: \"text\"\r\n};\r\nexport default TextInputGroup;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n//import uuid from \"uuid\"; //uuid()\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  //state ko prop ra form ko name prop (name, email, phone) match hunu parxa\r\n  onChangeHandler = e =>\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n\r\n  onSubmitHandler = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n\r\n    //check for errors\r\n    if (name === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          name: \"Name is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          email: \"Email is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          phone: \"Phone no. is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    const res = await axios.post(\r\n      \"https://jsonplaceholder.typicode.com/users\",\r\n      newContact\r\n    );\r\n    dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n\r\n    //clear state (reset form)\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    // back to home pg\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Add Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmitHandler.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone no...\"\r\n                    value={phone}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Add Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\n//import uuid from \"uuid\"; //uuid()\r\nimport axios from \"axios\";\r\n\r\nclass EditContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    errors: {}\r\n  };\r\n\r\n  //pull data into the labels to edit\r\n  async componentDidMount() {\r\n    //upon visiting a url, React Router will supply\r\n    //any dynamic pieces of the URL to the related component via an object called match.params\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n    const contact = res.data;\r\n    this.setState({\r\n      name: contact.name,\r\n      email: contact.email,\r\n      phone: contact.phone\r\n    });\r\n  }\r\n\r\n  //state ko prop ra form ko name prop (name, email, phone) match hunu parxa\r\n  onChangeHandler = e =>\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n\r\n  onSubmitHandler = async (dispatch, e) => {\r\n    e.preventDefault();\r\n    const { name, email, phone } = this.state;\r\n\r\n    //check for errors\r\n    if (name === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          name: \"Name is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          email: \"Email is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({\r\n        errors: {\r\n          phone: \"Phone no. is required\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    const updContact = { name, email, phone };\r\n\r\n    //put request for Update action\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.put(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`,\r\n      updContact\r\n    );\r\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    //clear state (reset form)\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      errors: {}\r\n    });\r\n    // back to home pg\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone, errors } = this.state;\r\n\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className=\"card mb-3\">\r\n              <div className=\"card-header\">Edit Contact</div>\r\n              <div className=\"card-body\">\r\n                <form onSubmit={this.onSubmitHandler.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Enter Name...\"\r\n                    value={name}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.name}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Email...\"\r\n                    value={email}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.email}\r\n                  />\r\n                  <TextInputGroup\r\n                    label=\"Phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Enter Phone no...\"\r\n                    value={phone}\r\n                    onChange={this.onChangeHandler}\r\n                    error={errors.phone}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"submit\"\r\n                    value=\"Update Contact\"\r\n                    className=\"btn btn-light btn-block\"\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\nexport default EditContact;\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n//import \"./App.css\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\n\nimport { Provider } from \"./context\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header branding=\"Contact Manager\" />\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}